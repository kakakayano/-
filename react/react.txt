メモ

stateはデータをためる場所
propsはstateが子コンポーネントに渡されてpropsになるてきな

リアクトとは
ファイスブック作ったライブラリ
オープンソース
UIを作るためのライブラリ

コンポーネント＝見た目＋機能　HTMLCSSどっちもある

HTMKLはDOMで変更する　divのDOMをjsで帰る　複雑な処理するからコスト高い

jsエンジンで効率の良いレンダリング（再描写）
差分のみを変更（仮想）
→関連（ツリーの下）をまとめて変更

jsxとは　JavaScriptの拡張言語
returnの中にHTMLとかがある
react要素を生成
js→react.createElementを書かなくていい
コンパイル時にreact.createElementを自動でつけてドキュメントにする

キャメルケースで記述
{}はjsの関数を使うってこと　関数を使える
階層構造になっていなくてはない
<div></div>いらないなら<React.Fragment>で階層にする　または<>空タグ

コンポーネント
・クラス
・ファンクショナル　メイン

1コンポーネント1ファイル1エクスポートで見やすい使いやすい
indexにASで名前つけてまとめてコンポーネントをまとめてimportできる
複数ページで使える　→　修正しやすい

親から子供にあげる　
子供の中で<h2>{props.title}</h2>てきな
同じ要素を再利用できる
大体何でも　jsの変数も渡せる
何度も使える
配列のmapメソッドとかでやる

Hooksでstateとライフサイクル使えるようになった　だからクラス使えない
ユーザー操作で表示が変わるようにする
DOMで直接書き換えるのはレンダリング弱い
更新用の関数を用意
const [state, setState] = 右が更新関数
<button onClic={() => }>

props親から子　親で更新する
stateは中で変化　子で更新するコンポーネントで
更新用の関数は一度関数化したほうがいい　初期化
無限レンダリングに気を付ける　関数の後ろに()つけたりすると無限になるかも　エラーになる

stateの実用的な使い方
更新関数が大事
preState　以前のstateを使う　
現在のstateにやるとタイムラグでバグるかも　重い処理無理
preState+1とかで使う



新日本一わかりやすいreact入門#7まで見た
コーディングなし gitで公開されている
タスク
・第2,3回くらいで環境構築(vscordでプロジェクト生成)をやってるから真似する
・Githubにログイン　gmailであった気がする　技術研修前に回収するため

